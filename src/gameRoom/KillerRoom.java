package gameRoom;

import communications.KillerPad;
import game.KillerGame;
import java.util.Hashtable;
import sound.KillerRadio;
import visibleObjects.KillerShip;

/**
 *
 * @author Yeray
 */
public class KillerRoom extends javax.swing.JFrame {
    public KillerPanelPrincipal kpp;
    public KillerPanelWinner kpw;
    public KillerPanelConectar kpc;
    public KillerPanelAjustes kpa;
    public KillerGame kg;
    
    /**
     * Creates new form KillerRoom
     */
    public KillerRoom(KillerGame kg) {
        this.kg = kg;
        initComponents();
        initJPanels();
        initConf();
    }
    
    /**
     * Inicia los jPanels
     */
    public void initJPanels(){
        kpp = new KillerPanelPrincipal(this);
        kpw = new KillerPanelWinner(this);
        kpc = new KillerPanelConectar(this);
        kpa = new KillerPanelAjustes(this);
    }
    
    /**
     * Configuración inicial de la ventana
     */
    public void initConf(){
        this.setSize(525, 525);
        this.setLocationRelativeTo(null); 
        this.setContentPane(kpp);
        KillerPanelPrincipal.jTextFieldSecret.requestFocus(); 
        kg.changeMusic(KillerRadio.ClipType.MENU);
    }
    
    /**
     * Configuración de opciones externa
     */
    public void setNetworkConf(boolean soundEffects, boolean soundMusic, boolean pacmanActive, boolean ultraPacman) {
        kpp.setNetworkConf(soundEffects, soundMusic, pacmanActive, ultraPacman);
    }
    
    /**
     * Método para KillerGame que devuelve la lista de jugadores
     * Para pintarla en el jPanel de Conectar
     * @param players 
     */
    public void updateUsers(Hashtable<String, KillerPad> players){
        kpc.updateUsers(players);
    }

     /**
     * Método para habilitar el botón jugar cuando las pantallas etan listas
     * @param aux 
     */
    public void setButtonPlay(Boolean aux){
        kpp.setButtonPlay(aux);
     }
    
    /**
     * Método para cambiar los iconos de estado de conexión 
     * de la patanlla izquierda
     * Para facilitar el uso al resto del equipo llaman a los de los jPanels
     * @param aux 
     */
    public void setFeedBackConnectionLeft(Boolean aux){
        if (aux == true) {
            kpp.setFeedbackConnetionLeft(true);
            kpc.setFeedbackConnetionLeft2(true);
        } else {
            kpp.setFeedbackConnetionLeft(false);
            kpc.setFeedbackConnetionLeft2(false);
        }
    }
    
    /**
     * Método para cambiar los iconos de estado de conexión 
     * de la patanlla derecha
     * Para facilitar el uso al resto del equipo llaman a los de los jPanels
     * @param aux 
     */
    public void setFeedBackConnectionRight(Boolean aux){
        if (aux == true) {
            kpp.setFeedbackConnetionRight(true);
            kpc.setFeedbackConnetionRight2(true);
        } else {
            kpp.setFeedbackConnetionRight(false);
            kpc.setFeedbackConnetionRight2(false);
        }
    }
    
    /**
     * Método que cambia el jPanel actual al Principal
     */
    public void setKillerPanelPrincipal() {
        this.setContentPane(kpp);
        kpw.updateUI();
        KillerPanelPrincipal.jTextFieldSecret.requestFocus();
    }

    /**
     * Método que cambia el jPanel actual al de Conexión
     */
    public void setKillerPanelConectar() {
        this.setContentPane(kpc);
        kpc.updateUI();
    }

    /**
     * Método que cambia el jPanel actual al de Ajustes
     */
    public void setKillerPanelAjustes() {
        this.setContentPane(kpa);
        kpa.updateUI();
    }
    
    /**
     * Método que cambia el jPanel actual al de Ganador
     * Pensado para ser usado cuando solo quede un jugador
     * @param aux
     */
    public void setKillerPanelWinner(String aux) {
        this.setContentPane(kpw);
        kpw.updateUI();
        kpw.setWinner(aux);
        
    }
    
    /**
     * Getter del objeto KillerGame
     * @return 
     */
    public KillerGame getKg(){
        return this.kg;
    }
    
    /**
     * Getter del KillerPanelPrincipal
     * @return 
     */
    public KillerPanelPrincipal getKPP() {
        return this.kpp;
    }
    
    /**
     * Getter de la clase
     * @return 
     */
    public KillerRoom getKillerRoom(){
        return this;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Killer Game");
        setUndecorated(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(KillerRoom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(KillerRoom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(KillerRoom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(KillerRoom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new KillerRoom().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
